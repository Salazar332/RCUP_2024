int pinlmotor1 = 12;
int pinlmotor2 = 13;
int pinlmotorENB = 11;
int spd1 = 0;
int x = 0;
int spd2 = 0;
int signal01 = 0;
int signal02 = 0;
float Pk1 = 2;
float Pk2 = 2;
class Motor{
public:
int pin1;
int pin2;
int pins;
  Motor(){
    pin1 = 12;
    pin2 = 13;
    pins = 11;
  }
  Motor(int p1, int p2, int ps){
    pin1 = p1;
    pin2 = p2;
    pins = ps;
    pinMode(pin1, OUTPUT);
    pinMode(pin2, OUTPUT);
    pinMode(pins, OUTPUT);
    }
  void speedset(int spd){
    if (spd > 0){
      digitalWrite(pin1, 1);
      digitalWrite(pin2, 0);
      analogWrite(pins, spd);
    } else{  
      digitalWrite(pin1, 0);
      digitalWrite(pin2, 1);
      analogWrite(pins, abs(spd));
      }
    } 
  };
Motor l_motor(12, 13, 11);
Motor r_motor(4, 5, 3);

class lightsensor{
public:
int signalFirst;
int signalpin;
  lightsensor(int pin){
    pinMode(pin, INPUT);
    signalpin = pin;
  }

  int findsignal(){
    return abs(analogRead(signalpin) - signalFirst);   
  }
  void init(){
    signalFirst = analogRead(signalpin);   
  }
};
lightsensor signal1(A0);
lightsensor signal2(A1);
lightsensor signal3(A2);
lightsensor signal4(A3);

class Distanter{
public:
int pinEcho;
int pinTrig;
int time;
  Distanter(){
    pinTrig = 8;
    pinEcho = 9;
  }
  Distanter(int pt, int pe){
    pinTrig = pt;
    pinEcho = pe;
    pinMode(pinTrig, OUTPUT);
    pinMode(pinEcho, INPUT);
  }
  int distant(){
    digitalWrite(pinTrig, 0);
    delayMicroseconds(5);
    digitalWrite(pinTrig, 1);
    delayMicroseconds(10);
    digitalWrite(pinTrig, 0);
    time = pulseIn(pinEcho, 1);
    return (time/2)/29.1;
    }
  };
Distanter number1(8, 9);

class PID{
public:
double error_o = 0;
double error_io = 0;
double Pk;
double Ik;
double Dk;
double Mi;
double p;
double i;
double d;
  PID(){
    Pk = 0 ;
    Ik = 0 ;
    Dk = 0 ;
    Mi = 0 ;
  }
  PID(double p, double i, double d, double m){
    Pk = p;
    Ik = i;
    Dk = d;
    Mi = m; 
  }
  double ID(double error){
    double error_i = error + error_io;
    if ((error_i * Ik) > Mi){
      error_i = Mi * Ik;
    }else
      if (error_i * Ik < -Mi){
        error_i = (-Mi) * Ik;
      }
    double error_d = error + error_o;
    error_io = error_i;
    error_o = error;
    p = error * Pk;
    i = error_i;
    d = error_d * Dk;
    return (error * Pk) + (error_i * Ik) - (error_d * Dk);
    } 
  };
PID s2s3(1.83, 0.03 , 2.1, 200.0);
PID s1s4(1.83, 0.05 , 2.1, 200.0);
//void infoaboutro8boy (int pk, int si1,int si2){
  //Serial.print('\t');
  //Serial.print(200+(Pk1 * (si1 - si2)));
  //Serial.print('\t');
  //Serial.print(200-(Pk * (si1 - si2)));
  //Serial.print('\t');
  //Serial.print(si1);
  //Serial.print('\t');
  //Serial.print(si2);
  //Serial.print('\n');
//}

void setup() {
  Serial.begin(9600);
  signal1.init();
  signal2.init();
  signal3.init();
  signal4.init();
  pinMode(12, OUTPUT);
  pinMode(13, OUTPUT);
  pinMode(11, OUTPUT);
  // put your setup code here, to run once:
}
void loop() {
  // put your main code here, to run repeatedly
  spd1 =(signal2.findsignal() - signal3.findsignal());
  spd2 =(signal1.findsignal() - signal4.findsignal());
  Serial.print(signal1.findsignal());
  Serial.print('\t');
  Serial.print(signal2.findsignal());
  Serial.print('\t');
  Serial.print(signal3.findsignal());
  Serial.print('\t');
  Serial.println(signal4.findsignal());
  Serial.println(spd1);
  //Serial.println(number1.distant());
  //Serial.println();
  // Serial.println(spd2);     
  //if (signal4.findsignal() - signal1.findsignal() < 0){  
    
  if ((number1.distant()) > 16){
    digitalWrite(12, 1);
    digitalWrite(13, 0);
    analogWrite(11, 255);
  }else{
    l_motor.speedset(255 + (s2s3.ID(spd1) + s1s4.ID(spd1)));
    r_motor.speedset(255 - (s2s3.ID(spd2) + s1s4.ID(spd2)));
  }
  //if (number_l.distant() > 9){  
    //r motor
    //DigitalWrite(4, 1)
    //DigitalWrite(5, 1)
    //AnalogWrite(3, 255)
  //}else{
    //l motor
    //DigitalWrite(12, 1)
    //DigitalWrite(13, 0)
    //AnalogWrite(11, 255)
  //}
//Motor l_motor(12, 13, 11);
//Motor r_motor(4, 5, 3);
}

